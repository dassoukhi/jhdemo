
entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}


entity Livre {
	titre String required unique,
	description String required,
	isbn String required unique,
	code String required
}

/**
 * The Utilisateur entity.
 * @author A true hipster
 */
entity Utilisateur {
		nom String required,
		prenom String required,
		dateNaissance LocalDate required,
		role String required,
		pseudo String required unique,
		motDePasse String required
}

/**
 * The Auteur entity.
 * @author A true hipster
 */
entity Auteur {
	auteur String required
}

/**
 * The Emplacement entity.
 * @author A true hipster
 */
entity Emplacement {
	nomEplacement String required
}

/**
 * The Theme entity.
 * @author A true hipster
 */
entity Theme {
	theme String maxlength(45) required
}

/**
 * The Exemplaire entity.
 * @author A true hipster
 */
entity Exemplaire {
	disponibilite Boolean required
}

/**
 * The Emprunt entity.
 * @author A true hipster
 */
entity Emprunt {
	dateEmprunt LocalDate required
}


enum Language {
    FRENCH, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location,
    Exemplaire{emprunt} to Emprunt,
    Livre{auteur} to Auteur,
    Livre{emplacement} to Emplacement
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee to Job{employee},
    Utilisateur to Emprunt{utilisateur},
	Department to Employee{department},
    Livre to Exemplaire{livre},
    Theme to Livre{theme}
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
