4059d23211629d892edbf5bf951088fe
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const profile_info_model_1 = require("app/layouts/profiles/profile-info.model");
const navbar_component_1 = require("app/layouts/navbar/navbar.component");
const account_service_1 = require("app/core/auth/account.service");
const profile_service_1 = require("app/layouts/profiles/profile.service");
describe('Component Tests', () => {
    describe('Navbar Component', () => {
        let comp;
        let fixture;
        let accountService;
        let profileService;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.JhdemoTestModule],
                declarations: [navbar_component_1.NavbarComponent],
            })
                .overrideTemplate(navbar_component_1.NavbarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(navbar_component_1.NavbarComponent);
            comp = fixture.componentInstance;
            accountService = testing_1.TestBed.get(account_service_1.AccountService);
            profileService = testing_1.TestBed.get(profile_service_1.ProfileService);
        });
        it('Should call profileService.getProfileInfo on init', () => {
            // GIVEN
            spyOn(profileService, 'getProfileInfo').and.returnValue(rxjs_1.of(new profile_info_model_1.ProfileInfo()));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(profileService.getProfileInfo).toHaveBeenCalled();
        });
        it('Should call accountService.isAuthenticated on authentication', () => {
            // WHEN
            comp.isAuthenticated();
            // THEN
            expect(accountService.isAuthenticated).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxqaGRlbW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxsYXlvdXRzXFxuYXZiYXJcXG5hdmJhci5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF5RTtBQUN6RSwrQkFBMEI7QUFFMUIsc0RBQXdEO0FBQ3hELGdGQUFzRTtBQUN0RSwwRUFBc0U7QUFDdEUsbUVBQStEO0FBQy9ELDBFQUFzRTtBQUV0RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsSUFBSSxJQUFxQixDQUFDO1FBQzFCLElBQUksT0FBMEMsQ0FBQztRQUMvQyxJQUFJLGNBQThCLENBQUM7UUFDbkMsSUFBSSxjQUE4QixDQUFDO1FBRW5DLFVBQVUsQ0FBQyxlQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLDhCQUFnQixDQUFDO2dCQUMzQixZQUFZLEVBQUUsQ0FBQyxrQ0FBZSxDQUFDO2FBQ2hDLENBQUM7aUJBQ0MsZ0JBQWdCLENBQUMsa0NBQWUsRUFBRSxFQUFFLENBQUM7aUJBQ3JDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1lBQ25ELElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7WUFDakMsY0FBYyxHQUFHLGlCQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFjLENBQUMsQ0FBQztZQUM3QyxjQUFjLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtZQUMzRCxRQUFRO1lBQ1IsS0FBSyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBRSxDQUFDLElBQUksZ0NBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUUvRSxPQUFPO1lBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhCLE9BQU87WUFDUCxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsR0FBRyxFQUFFO1lBQ3RFLE9BQU87WUFDUCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsT0FBTztZQUNQLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxqaGRlbW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxsYXlvdXRzXFxuYXZiYXJcXG5hdmJhci5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCBhc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBKaGRlbW9UZXN0TW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vdGVzdC5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvZmlsZUluZm8gfSBmcm9tICdhcHAvbGF5b3V0cy9wcm9maWxlcy9wcm9maWxlLWluZm8ubW9kZWwnO1xuaW1wb3J0IHsgTmF2YmFyQ29tcG9uZW50IH0gZnJvbSAnYXBwL2xheW91dHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWNjb3VudFNlcnZpY2UgfSBmcm9tICdhcHAvY29yZS9hdXRoL2FjY291bnQuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9maWxlU2VydmljZSB9IGZyb20gJ2FwcC9sYXlvdXRzL3Byb2ZpbGVzL3Byb2ZpbGUuc2VydmljZSc7XG5cbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdOYXZiYXIgQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBjb21wOiBOYXZiYXJDb21wb25lbnQ7XG4gICAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8TmF2YmFyQ29tcG9uZW50PjtcbiAgICBsZXQgYWNjb3VudFNlcnZpY2U6IEFjY291bnRTZXJ2aWNlO1xuICAgIGxldCBwcm9maWxlU2VydmljZTogUHJvZmlsZVNlcnZpY2U7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIGltcG9ydHM6IFtKaGRlbW9UZXN0TW9kdWxlXSxcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbTmF2YmFyQ29tcG9uZW50XSxcbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKE5hdmJhckNvbXBvbmVudCwgJycpXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pKTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KE5hdmJhckNvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIGFjY291bnRTZXJ2aWNlID0gVGVzdEJlZC5nZXQoQWNjb3VudFNlcnZpY2UpO1xuICAgICAgcHJvZmlsZVNlcnZpY2UgPSBUZXN0QmVkLmdldChQcm9maWxlU2VydmljZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGNhbGwgcHJvZmlsZVNlcnZpY2UuZ2V0UHJvZmlsZUluZm8gb24gaW5pdCcsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBzcHlPbihwcm9maWxlU2VydmljZSwgJ2dldFByb2ZpbGVJbmZvJykuYW5kLnJldHVyblZhbHVlKG9mKG5ldyBQcm9maWxlSW5mbygpKSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbXAubmdPbkluaXQoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHByb2ZpbGVTZXJ2aWNlLmdldFByb2ZpbGVJbmZvKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGNhbGwgYWNjb3VudFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkIG9uIGF1dGhlbnRpY2F0aW9uJywgKCkgPT4ge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29tcC5pc0F1dGhlbnRpY2F0ZWQoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGFjY291bnRTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9