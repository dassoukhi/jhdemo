29c0c6bcfa08eb0a54d6eba89a98867e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const location_service_1 = require("app/entities/location/location.service");
const location_model_1 = require("app/shared/model/location.model");
describe('Service Tests', () => {
    describe('Location Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(location_service_1.LocationService);
            httpMock = injector.get(testing_2.HttpTestingController);
            elemDefault = new location_model_1.Location(0, 'AAAAAAA', 'AAAAAAA', 'AAAAAAA', 'AAAAAAA');
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({}, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Location', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.create(new location_model_1.Location()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Location', () => {
                const returnedFromService = Object.assign({
                    streetAddress: 'BBBBBB',
                    postalCode: 'BBBBBB',
                    city: 'BBBBBB',
                    stateProvince: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Location', () => {
                const returnedFromService = Object.assign({
                    streetAddress: 'BBBBBB',
                    postalCode: 'BBBBBB',
                    city: 'BBBBBB',
                    stateProvince: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Location', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,