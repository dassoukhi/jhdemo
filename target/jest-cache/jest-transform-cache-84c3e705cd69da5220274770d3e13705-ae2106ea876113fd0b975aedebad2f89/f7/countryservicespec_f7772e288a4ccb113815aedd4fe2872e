bf9ed17d9e2eab2e38e85b6f0f271952
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const country_service_1 = require("app/entities/country/country.service");
const country_model_1 = require("app/shared/model/country.model");
describe('Service Tests', () => {
    describe('Country Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(country_service_1.CountryService);
            httpMock = injector.get(testing_2.HttpTestingController);
            elemDefault = new country_model_1.Country(0, 'AAAAAAA');
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({}, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Country', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.create(new country_model_1.Country()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Country', () => {
                const returnedFromService = Object.assign({
                    countryName: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Country', () => {
                const returnedFromService = Object.assign({
                    countryName: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({}, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Country', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,