b431568e043c4a44dbf047c076977c6b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const rxjs_1 = require("rxjs");
const http_1 = require("@angular/common/http");
const router_1 = require("@angular/router");
const test_module_1 = require("../../../test.module");
const job_history_component_1 = require("app/entities/job-history/job-history.component");
const job_history_service_1 = require("app/entities/job-history/job-history.service");
const job_history_model_1 = require("app/shared/model/job-history.model");
describe('Component Tests', () => {
    describe('JobHistory Management Component', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.JhdemoTestModule],
                declarations: [job_history_component_1.JobHistoryComponent],
                providers: [
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: {
                            data: rxjs_1.of({
                                defaultSort: 'id,asc',
                            }),
                            queryParamMap: rxjs_1.of(router_1.convertToParamMap({
                                page: '1',
                                size: '1',
                                sort: 'id,desc',
                            })),
                        },
                    },
                ],
            })
                .overrideTemplate(job_history_component_1.JobHistoryComponent, '')
                .compileComponents();
            fixture = testing_1.TestBed.createComponent(job_history_component_1.JobHistoryComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(job_history_service_1.JobHistoryService);
        });
        it('Should call load all on init', () => {
            // GIVEN
            const headers = new http_1.HttpHeaders().append('link', 'link;link');
            spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({
                body: [new job_history_model_1.JobHistory(123)],
                headers,
            })));
            // WHEN
            comp.ngOnInit();
            // THEN
            expect(service.query).toHaveBeenCalled();
            expect(comp.jobHistories && comp.jobHistories[0]).toEqual(jasmine.objectContaining({ id: 123 }));
        });
        it('should load a page', () => {
            // GIVEN
            const headers = new http_1.HttpHeaders().append('link', 'link;link');
            spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({
                body: [new job_history_model_1.JobHistory(123)],
                headers,
            })));
            // WHEN
            comp.loadPage(1);
            // THEN
            expect(service.query).toHaveBeenCalled();
            expect(comp.jobHistories && comp.jobHistories[0]).toEqual(jasmine.objectContaining({ id: 123 }));
        });
        it('should re-initialize the page', () => {
            // GIVEN
            const headers = new http_1.HttpHeaders().append('link', 'link;link');
            spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({
                body: [new job_history_model_1.JobHistory(123)],
                headers,
            })));
            // WHEN
            comp.loadPage(1);
            comp.reset();
            // THEN
            expect(comp.page).toEqual(0);
            expect(service.query).toHaveBeenCalledTimes(2);
            expect(comp.jobHistories && comp.jobHistories[0]).toEqual(jasmine.objectContaining({ id: 123 }));
        });
        it('should calculate the sort attribute for an id', () => {
            // WHEN
            comp.ngOnInit();
            const result = comp.sort();
            // THEN
            expect(result).toEqual(['id,asc']);
        });
        it('should calculate the sort attribute for a non-id attribute', () => {
            // INIT
            comp.ngOnInit();
            // GIVEN
            comp.predicate = 'name';
            // WHEN
            const result = comp.sort();
            // THEN
            expect(result).toEqual(['name,asc', 'id']);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,