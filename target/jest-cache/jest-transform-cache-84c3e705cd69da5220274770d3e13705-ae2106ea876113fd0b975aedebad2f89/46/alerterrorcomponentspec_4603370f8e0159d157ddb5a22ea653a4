578c0a71de9087585ab2a5c2c2e96427
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const ng_jhipster_1 = require("ng-jhipster");
const core_1 = require("@ngx-translate/core");
const test_module_1 = require("../../../test.module");
const alert_error_component_1 = require("app/shared/alert/alert-error.component");
const mock_alert_service_1 = require("../../../helpers/mock-alert.service");
describe('Component Tests', () => {
    describe('Alert Error Component', () => {
        let comp;
        let fixture;
        let eventManager;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.JhdemoTestModule, core_1.TranslateModule.forRoot()],
                declarations: [alert_error_component_1.AlertErrorComponent],
                providers: [
                    ng_jhipster_1.JhiEventManager,
                    {
                        provide: ng_jhipster_1.JhiAlertService,
                        useClass: mock_alert_service_1.MockAlertService,
                    },
                ],
            })
                .overrideTemplate(alert_error_component_1.AlertErrorComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(alert_error_component_1.AlertErrorComponent);
            comp = fixture.componentInstance;
            eventManager = fixture.debugElement.injector.get(ng_jhipster_1.JhiEventManager);
        });
        describe('Error Handling', () => {
            it('Should display an alert on status 0', () => {
                // GIVEN
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: { status: 0 } });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('error.server.not.reachable');
            });
            it('Should display an alert on status 404', () => {
                // GIVEN
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: { status: 404 } });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('error.url.not.found');
            });
            it('Should display an alert on generic error', () => {
                // GIVEN
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: { error: { message: 'Error Message' } } });
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: { error: 'Second Error Message' } });
                // THEN
                expect(comp.alerts.length).toBe(2);
                expect(comp.alerts[0].msg).toBe('Error Message');
                expect(comp.alerts[1].msg).toBe('Second Error Message');
            });
            it('Should display an alert on status 400 for generic error', () => {
                // GIVEN
                const response = new http_1.HttpErrorResponse({
                    url: 'http://localhost:8080/api/foos',
                    headers: new http_1.HttpHeaders(),
                    status: 400,
                    statusText: 'Bad Request',
                    error: {
                        type: 'https://www.jhipster.tech/problem/constraint-violation',
                        title: 'Bad Request',
                        status: 400,
                        path: '/api/foos',
                        message: 'error.validation',
                    },
                });
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: response });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('error.validation');
            });
            it('Should display an alert on status 400 for generic error without message', () => {
                // GIVEN
                const response = new http_1.HttpErrorResponse({
                    url: 'http://localhost:8080/api/foos',
                    headers: new http_1.HttpHeaders(),
                    status: 400,
                    error: 'Bad Request',
                });
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: response });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('Bad Request');
            });
            it('Should display an alert on status 400 for invalid parameters', () => {
                // GIVEN
                const response = new http_1.HttpErrorResponse({
                    url: 'http://localhost:8080/api/foos',
                    headers: new http_1.HttpHeaders(),
                    status: 400,
                    statusText: 'Bad Request',
                    error: {
                        type: 'https://www.jhipster.tech/problem/constraint-violation',
                        title: 'Method argument not valid',
                        status: 400,
                        path: '/api/foos',
                        message: 'error.validation',
                        fieldErrors: [{ objectName: 'foo', field: 'minField', message: 'Min' }],
                    },
                });
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: response });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('error.Size');
            });
            it('Should display an alert on status 400 for error headers', () => {
                // GIVEN
                const response = new http_1.HttpErrorResponse({
                    url: 'http://localhost:8080/api/foos',
                    headers: new http_1.HttpHeaders().append('app-error', 'Error Message').append('app-params', 'foo'),
                    status: 400,
                    statusText: 'Bad Request',
                    error: {
                        status: 400,
                        message: 'error.validation',
                    },
                });
                eventManager.broadcast({ name: 'jhdemoApp.httpError', content: response });
                // THEN
                expect(comp.alerts.length).toBe(1);
                expect(comp.alerts[0].msg).toBe('Error Message');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,