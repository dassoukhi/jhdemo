c04ef9d81d2065c3a80fe29ac57eff9e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const account_service_1 = require("app/core/auth/account.service");
const settings_component_1 = require("app/account/settings/settings.component");
describe('Component Tests', () => {
    describe('SettingsComponent', () => {
        let comp;
        let fixture;
        let mockAuth;
        const accountValues = {
            firstName: 'John',
            lastName: 'Doe',
            activated: true,
            email: 'john.doe@mail.com',
            langKey: 'fr',
            login: 'john',
            authorities: [],
            imageUrl: '',
        };
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.JhdemoTestModule],
                declarations: [settings_component_1.SettingsComponent],
                providers: [forms_1.FormBuilder],
            })
                .overrideTemplate(settings_component_1.SettingsComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(settings_component_1.SettingsComponent);
            comp = fixture.componentInstance;
            mockAuth = testing_1.TestBed.get(account_service_1.AccountService);
            mockAuth.setIdentityResponse(accountValues);
        });
        it('should send the current identity upon save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.of({}));
            const settingsFormValues = {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john.doe@mail.com',
                langKey: 'fr',
            };
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(mockAuth.identitySpy).toHaveBeenCalled();
            expect(mockAuth.saveSpy).toHaveBeenCalledWith(accountValues);
            expect(mockAuth.authenticateSpy).toHaveBeenCalledWith(accountValues);
            expect(comp.settingsForm.value).toEqual(settingsFormValues);
        });
        it('should notify of success upon successful save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.of({}));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(true);
        });
        it('should notify of error upon failed save', () => {
            // GIVEN
            mockAuth.saveSpy.and.returnValue(rxjs_1.throwError('ERROR'));
            // WHEN
            comp.ngOnInit();
            comp.save();
            // THEN
            expect(comp.success).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxqaGRlbW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcYXBwXFxhY2NvdW50XFxzZXR0aW5nc1xcc2V0dGluZ3MuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUU7QUFDekUsMENBQTZDO0FBQzdDLCtCQUFzQztBQUV0QyxzREFBd0Q7QUFDeEQsbUVBQStEO0FBRS9ELGdGQUE0RTtBQUc1RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxJQUF1QixDQUFDO1FBQzVCLElBQUksT0FBNEMsQ0FBQztRQUNqRCxJQUFJLFFBQTRCLENBQUM7UUFDakMsTUFBTSxhQUFhLEdBQVk7WUFDN0IsU0FBUyxFQUFFLE1BQU07WUFDakIsUUFBUSxFQUFFLEtBQUs7WUFDZixTQUFTLEVBQUUsSUFBSTtZQUNmLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsTUFBTTtZQUNiLFdBQVcsRUFBRSxFQUFFO1lBQ2YsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsVUFBVSxDQUFDLGVBQUssQ0FBQyxHQUFHLEVBQUU7WUFDcEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsOEJBQWdCLENBQUM7Z0JBQzNCLFlBQVksRUFBRSxDQUFDLHNDQUFpQixDQUFDO2dCQUNqQyxTQUFTLEVBQUUsQ0FBQyxtQkFBVyxDQUFDO2FBQ3pCLENBQUM7aUJBQ0MsZ0JBQWdCLENBQUMsc0NBQWlCLEVBQUUsRUFBRSxDQUFDO2lCQUN2QyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLHNDQUFpQixDQUFDLENBQUM7WUFDckQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNqQyxRQUFRLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1lBQ3ZDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDcEQsUUFBUTtZQUNSLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLGtCQUFrQixHQUFHO2dCQUN6QixTQUFTLEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsS0FBSyxFQUFFLG1CQUFtQjtnQkFDMUIsT0FBTyxFQUFFLElBQUk7YUFDZCxDQUFDO1lBRUYsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFWixPQUFPO1lBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNyRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7WUFDdkQsUUFBUTtZQUNSLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV6QyxPQUFPO1lBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVaLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7WUFDakQsUUFBUTtZQUNSLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxpQkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFdEQsT0FBTztZQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFWixPQUFPO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcRGFzc1xcRGVza3RvcFxcTWFzdGVyMV9ZTk9WXFxEZXZMb2dpY2llbFxcamhkZW1vXFxzcmNcXHRlc3RcXGphdmFzY3JpcHRcXHNwZWNcXGFwcFxcYWNjb3VudFxcc2V0dGluZ3NcXHNldHRpbmdzLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciwgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSmhkZW1vVGVzdE1vZHVsZSB9IGZyb20gJy4uLy4uLy4uL3Rlc3QubW9kdWxlJztcbmltcG9ydCB7IEFjY291bnRTZXJ2aWNlIH0gZnJvbSAnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJ2FwcC9jb3JlL3VzZXIvYWNjb3VudC5tb2RlbCc7XG5pbXBvcnQgeyBTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJ2FwcC9hY2NvdW50L3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2NrQWNjb3VudFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL21vY2stYWNjb3VudC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0NvbXBvbmVudCBUZXN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1NldHRpbmdzQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBjb21wOiBTZXR0aW5nc0NvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxTZXR0aW5nc0NvbXBvbmVudD47XG4gICAgbGV0IG1vY2tBdXRoOiBNb2NrQWNjb3VudFNlcnZpY2U7XG4gICAgY29uc3QgYWNjb3VudFZhbHVlczogQWNjb3VudCA9IHtcbiAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgICAgYWN0aXZhdGVkOiB0cnVlLFxuICAgICAgZW1haWw6ICdqb2huLmRvZUBtYWlsLmNvbScsXG4gICAgICBsYW5nS2V5OiAnZnInLFxuICAgICAgbG9naW46ICdqb2huJyxcbiAgICAgIGF1dGhvcml0aWVzOiBbXSxcbiAgICAgIGltYWdlVXJsOiAnJyxcbiAgICB9O1xuXG4gICAgYmVmb3JlRWFjaChhc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbSmhkZW1vVGVzdE1vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW1NldHRpbmdzQ29tcG9uZW50XSxcbiAgICAgICAgcHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdLFxuICAgICAgfSlcbiAgICAgICAgLm92ZXJyaWRlVGVtcGxhdGUoU2V0dGluZ3NDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KSk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChTZXR0aW5nc0NvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIG1vY2tBdXRoID0gVGVzdEJlZC5nZXQoQWNjb3VudFNlcnZpY2UpO1xuICAgICAgbW9ja0F1dGguc2V0SWRlbnRpdHlSZXNwb25zZShhY2NvdW50VmFsdWVzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VuZCB0aGUgY3VycmVudCBpZGVudGl0eSB1cG9uIHNhdmUnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgbW9ja0F1dGguc2F2ZVNweS5hbmQucmV0dXJuVmFsdWUob2Yoe30pKTtcbiAgICAgIGNvbnN0IHNldHRpbmdzRm9ybVZhbHVlcyA9IHtcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgICAgZW1haWw6ICdqb2huLmRvZUBtYWlsLmNvbScsXG4gICAgICAgIGxhbmdLZXk6ICdmcicsXG4gICAgICB9O1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG4gICAgICBjb21wLnNhdmUoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KG1vY2tBdXRoLmlkZW50aXR5U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja0F1dGguc2F2ZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYWNjb3VudFZhbHVlcyk7XG4gICAgICBleHBlY3QobW9ja0F1dGguYXV0aGVudGljYXRlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhY2NvdW50VmFsdWVzKTtcbiAgICAgIGV4cGVjdChjb21wLnNldHRpbmdzRm9ybS52YWx1ZSkudG9FcXVhbChzZXR0aW5nc0Zvcm1WYWx1ZXMpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3RpZnkgb2Ygc3VjY2VzcyB1cG9uIHN1Y2Nlc3NmdWwgc2F2ZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBtb2NrQXV0aC5zYXZlU3B5LmFuZC5yZXR1cm5WYWx1ZShvZih7fSkpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBjb21wLm5nT25Jbml0KCk7XG4gICAgICBjb21wLnNhdmUoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90aWZ5IG9mIGVycm9yIHVwb24gZmFpbGVkIHNhdmUnLCAoKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgbW9ja0F1dGguc2F2ZVNweS5hbmQucmV0dXJuVmFsdWUodGhyb3dFcnJvcignRVJST1InKSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbXAubmdPbkluaXQoKTtcbiAgICAgIGNvbXAuc2F2ZSgpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==