1bf677e8443223cb24eb0dd84c7da6f3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRouter = exports.MockActivatedRoute = void 0;
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const spyobject_1 = require("./spyobject");
class MockActivatedRoute extends router_1.ActivatedRoute {
    constructor(parameters) {
        super();
        this.queryParamsSubject = new rxjs_1.ReplaySubject();
        this.paramSubject = new rxjs_1.ReplaySubject();
        this.dataSubject = new rxjs_1.ReplaySubject();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.params = this.paramSubject.asObservable();
        this.data = this.dataSubject.asObservable();
        this.setParameters(parameters);
    }
    setParameters(parameters) {
        this.queryParamsSubject.next(parameters);
        this.paramSubject.next(parameters);
        this.dataSubject.next(Object.assign(Object.assign({}, parameters), { defaultSort: 'id,desc' }));
    }
}
exports.MockActivatedRoute = MockActivatedRoute;
class MockRouter extends spyobject_1.SpyObject {
    constructor() {
        super(router_1.Router);
        this.events = null;
        this.url = '';
        this.navigateSpy = this.spy('navigate');
        this.navigateByUrlSpy = this.spy('navigateByUrl');
    }
    setEvents(events) {
        this.events = events;
    }
    setRouterState(routerState) {
        this.routerState = routerState;
    }
}
exports.MockRouter = MockRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxEYXNzXFxEZXNrdG9wXFxNYXN0ZXIxX1lOT1ZcXERldkxvZ2ljaWVsXFxqaGRlbW9cXHNyY1xcdGVzdFxcamF2YXNjcmlwdFxcc3BlY1xcaGVscGVyc1xcbW9jay1yb3V0ZS5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7OztBQUNBLDRDQUFvRjtBQUNwRiwrQkFBaUQ7QUFFakQsMkNBQXdDO0FBRXhDLE1BQWEsa0JBQW1CLFNBQVEsdUJBQWM7SUFLcEQsWUFBWSxVQUFrQjtRQUM1QixLQUFLLEVBQUUsQ0FBQztRQUxGLHVCQUFrQixHQUFHLElBQUksb0JBQWEsRUFBVSxDQUFDO1FBQ2pELGlCQUFZLEdBQUcsSUFBSSxvQkFBYSxFQUFVLENBQUM7UUFDM0MsZ0JBQVcsR0FBRyxJQUFJLG9CQUFhLEVBQVEsQ0FBQztRQUk5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxVQUFrQjtRQUM5QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxpQ0FDaEIsVUFBVSxLQUNiLFdBQVcsRUFBRSxTQUFTLElBQ3RCLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFyQkQsZ0RBcUJDO0FBRUQsTUFBYSxVQUFXLFNBQVEscUJBQVM7SUFPdkM7UUFDRSxLQUFLLENBQUMsZUFBTSxDQUFDLENBQUM7UUFMaEIsV0FBTSxHQUFtQyxJQUFJLENBQUM7UUFFOUMsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUlQLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQStCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxjQUFjLENBQUMsV0FBZ0I7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBcEJELGdDQW9CQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXERhc3NcXERlc2t0b3BcXE1hc3RlcjFfWU5PVlxcRGV2TG9naWNpZWxcXGpoZGVtb1xcc3JjXFx0ZXN0XFxqYXZhc2NyaXB0XFxzcGVjXFxoZWxwZXJzXFxtb2NrLXJvdXRlLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNweSA9IGphc21pbmUuU3B5O1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciwgUm91dGVyRXZlbnQsIERhdGEsIFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFNweU9iamVjdCB9IGZyb20gJy4vc3B5b2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIE1vY2tBY3RpdmF0ZWRSb3V0ZSBleHRlbmRzIEFjdGl2YXRlZFJvdXRlIHtcbiAgcHJpdmF0ZSBxdWVyeVBhcmFtc1N1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxQYXJhbXM+KCk7XG4gIHByaXZhdGUgcGFyYW1TdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8UGFyYW1zPigpO1xuICBwcml2YXRlIGRhdGFTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8RGF0YT4oKTtcblxuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiBQYXJhbXMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucXVlcnlQYXJhbXMgPSB0aGlzLnF1ZXJ5UGFyYW1zU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnBhcmFtcyA9IHRoaXMucGFyYW1TdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzOiBQYXJhbXMpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXJ5UGFyYW1zU3ViamVjdC5uZXh0KHBhcmFtZXRlcnMpO1xuICAgIHRoaXMucGFyYW1TdWJqZWN0Lm5leHQocGFyYW1ldGVycyk7XG4gICAgdGhpcy5kYXRhU3ViamVjdC5uZXh0KHtcbiAgICAgIC4uLnBhcmFtZXRlcnMsXG4gICAgICBkZWZhdWx0U29ydDogJ2lkLGRlc2MnLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrUm91dGVyIGV4dGVuZHMgU3B5T2JqZWN0IHtcbiAgbmF2aWdhdGVTcHk6IFNweTtcbiAgbmF2aWdhdGVCeVVybFNweTogU3B5O1xuICBldmVudHM6IE9ic2VydmFibGU8Um91dGVyRXZlbnQ+IHwgbnVsbCA9IG51bGw7XG4gIHJvdXRlclN0YXRlOiBhbnk7XG4gIHVybCA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFJvdXRlcik7XG4gICAgdGhpcy5uYXZpZ2F0ZVNweSA9IHRoaXMuc3B5KCduYXZpZ2F0ZScpO1xuICAgIHRoaXMubmF2aWdhdGVCeVVybFNweSA9IHRoaXMuc3B5KCduYXZpZ2F0ZUJ5VXJsJyk7XG4gIH1cblxuICBzZXRFdmVudHMoZXZlbnRzOiBPYnNlcnZhYmxlPFJvdXRlckV2ZW50Pik6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICB9XG5cbiAgc2V0Um91dGVyU3RhdGUocm91dGVyU3RhdGU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyU3RhdGUgPSByb3V0ZXJTdGF0ZTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9