aff6a2d0f9a5fc9ea67d90e48b4412c5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../../test.module");
const password_reset_finish_component_1 = require("app/account/password-reset/finish/password-reset-finish.component");
const password_reset_finish_service_1 = require("app/account/password-reset/finish/password-reset-finish.service");
const mock_route_service_1 = require("../../../../helpers/mock-route.service");
describe('Component Tests', () => {
    describe('PasswordResetFinishComponent', () => {
        let fixture;
        let comp;
        beforeEach(() => {
            fixture = testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.JhdemoTestModule],
                declarations: [password_reset_finish_component_1.PasswordResetFinishComponent],
                providers: [
                    forms_1.FormBuilder,
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: new mock_route_service_1.MockActivatedRoute({ key: 'XYZPDQ' }),
                    },
                ],
            })
                .overrideTemplate(password_reset_finish_component_1.PasswordResetFinishComponent, '')
                .createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
        });
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_reset_finish_component_1.PasswordResetFinishComponent);
            comp = fixture.componentInstance;
            comp.ngOnInit();
        });
        it('should define its initial state', () => {
            expect(comp.initialized).toBe(true);
            expect(comp.key).toEqual('XYZPDQ');
        });
        it('sets focus after the view has been initialized', () => {
            const node = {
                focus() { },
            };
            comp.newPassword = new core_1.ElementRef(node);
            spyOn(node, 'focus');
            comp.ngAfterViewInit();
            expect(node.focus).toHaveBeenCalled();
        });
        it('should ensure the two passwords entered match', () => {
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'non-matching',
            });
            comp.finishReset();
            expect(comp.doNotMatch).toBe(true);
        });
        it('should update success to true after resetting password', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.of({}));
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'password',
            });
            comp.finishReset();
            testing_1.tick();
            expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
            expect(comp.success).toBe(true);
        })));
        it('should notify of generic error', testing_1.inject([password_reset_finish_service_1.PasswordResetFinishService], testing_1.fakeAsync((service) => {
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError('ERROR'));
            comp.passwordForm.patchValue({
                newPassword: 'password',
                confirmPassword: 'password',
            });
            comp.finishReset();
            testing_1.tick();
            expect(service.save).toHaveBeenCalledWith('XYZPDQ', 'password');
            expect(comp.success).toBe(false);
            expect(comp.error).toBe(true);
        })));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,