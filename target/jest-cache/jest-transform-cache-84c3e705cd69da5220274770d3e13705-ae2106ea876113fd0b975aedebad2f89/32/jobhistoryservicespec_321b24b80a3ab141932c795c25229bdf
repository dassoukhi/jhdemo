803c23bc0489e7a0efc8aea2644b9ee2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const moment = require("moment");
const input_constants_1 = require("app/shared/constants/input.constants");
const job_history_service_1 = require("app/entities/job-history/job-history.service");
const job_history_model_1 = require("app/shared/model/job-history.model");
describe('Service Tests', () => {
    describe('JobHistory Service', () => {
        let injector;
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            injector = testing_1.getTestBed();
            service = injector.get(job_history_service_1.JobHistoryService);
            httpMock = injector.get(testing_2.HttpTestingController);
            currentDate = moment();
            elemDefault = new job_history_model_1.JobHistory(0, currentDate, currentDate, "FRENCH" /* FRENCH */);
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a JobHistory', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.create(new job_history_model_1.JobHistory()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a JobHistory', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    language: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of JobHistory', () => {
                const returnedFromService = Object.assign({
                    startDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    endDate: currentDate.format(input_constants_1.DATE_TIME_FORMAT),
                    language: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    startDate: currentDate,
                    endDate: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a JobHistory', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,